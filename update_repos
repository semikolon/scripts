#!/usr/local/var/rbenv/shims/ruby

ENV['RBENV_ROOT'] ||= '/usr/local/var/rbenv'
`which rbenv > /dev/null 2>&1`
if $?.success?
  `eval "$(rbenv init -)"`
end

require 'oj'
require 'colorize'
require 'rubygems'

def log_success(message)
  puts message.green
end

def log_error(message)
  puts message.red
end

def get_local_gem_path(gem_name)
  spec = Gem::Specification.find_by_name(gem_name)
  spec.gem_dir
rescue Gem::LoadError
  nil
end

def get_local_npm_path(package_name, project_dir)
  potential_path = File.join(project_dir, 'node_modules', package_name)
  return potential_path if File.directory?(potential_path)
  nil
end

# Main script starts here

if File.exist?('Gemfile')
  log_success("Gemfile found. Processing...")
  File.readlines('Gemfile').each do |line|
    if line =~ /^gem\s+'([^']+)'/ # basic regex to extract gem name
      gem_name = $1
      local_path = get_local_gem_path(gem_name)
      if local_path
        log_success("Found local path for gem #{gem_name}: #{local_path}")
        # Process the code from local_path...
      else
        log_error("Local path not found for gem: #{gem_name}")
      end
    end
  end
elsif File.exist?('package.json')
  log_success("package.json found. Processing...")
  packages = Oj.load(File.read('package.json'))['dependencies']
  project_dir = Dir.pwd
  packages.each do |package_name, _version|
    local_path = get_local_npm_path(package_name, project_dir)
    if local_path
      log_success("Found local path for npm package #{package_name}: #{local_path}")
      # Process the code from local_path...
    else
      log_error("Local path not found for npm package: #{package_name}. Ensure the package is installed using 'npm install #{package_name}' or 'yarn add #{package_name}' if you're using Yarn.")
    end
  end
else
  log_error("Neither Gemfile nor package.json found in the current directory.")
end
