#!/usr/local/var/rbenv/shims/ruby

ENV['RBENV_ROOT'] ||= '/usr/local/var/rbenv'
`which rbenv > /dev/null 2>&1`
if $?.success?
  `eval "$(rbenv init -)"`
end

require 'oj'
require 'colorize'
require 'bundler'
require 'pry'

def log_success(message)
  puts message.green
end

def log_error(message)
  puts message.red
end

def get_local_npm_path(package_name, project_dir)
  potential_path = File.join(project_dir, 'node_modules', package_name)
  return potential_path if File.directory?(potential_path)
  nil
end

def prompt_for_inclusion(package_name, modify_mode, package_statuses)
  # Ensure the package has an initialized hash
  package_statuses[package_name.to_sym] ||= {}
  
  # Directly access the enabled status from the package_statuses hash
  enabled_status = package_statuses.dig(package_name.to_sym, :enabled)
  
  # puts "Debug: Package: #{package_name}, Enabled Status: #{enabled_status}" # Debug print
  
  # If modify_mode is false and the enabled status exists and is not nil, return the enabled status
  return enabled_status if !modify_mode && !enabled_status.nil?
  
  previous_choice = enabled_status.nil? ? 'n' : (enabled_status ? 'y' : 'n')
  
  print "Include #{package_name} in embeddings? [#{previous_choice}]: "
  decision = STDIN.gets.chomp.downcase
  decision = previous_choice if decision.empty?
  package_statuses[package_name.to_sym][:enabled] = (decision == 'y')
end


modify_mode = ARGV.include?('-m') || ARGV.include?('--modify')

PACKAGE_STATUS_FILE = 'packages_status.json'

# Load or initialize the package statuses
if File.exist?(PACKAGE_STATUS_FILE)
  package_statuses = Oj.load(File.read(PACKAGE_STATUS_FILE), symbol_keys: true)
else
  package_statuses = {}
end

# Validate the structure of the package_statuses
package_statuses.each do |package, details|
  unless details.is_a?(Hash) && details.key?(:path) && details.key?(:enabled)
    package_statuses = {} # Reset if the structure is not as expected
    break
  end
end

if File.exist?('Gemfile')
  log_success("Gemfile found. Processing...")
  
  unless system('bundle check')
    log_error("Some gems are missing. Please run 'bundle install' and try again.")
    exit
  end
  
  Bundler.load.specs.each do |spec|
    local_path = spec.full_gem_path
    gem_name = spec.name

    if local_path && File.directory?(local_path)
      # log_success("Found local path for gem #{gem_name}: #{local_path}")
      package_statuses[gem_name.to_sym] = { path: local_path, enabled: prompt_for_inclusion(gem_name, modify_mode, package_statuses) }
    else
      log_error("Local path not found for gem: #{gem_name}")
    end
  end
elsif File.exist?('package.json')
  log_success("package.json found. Processing...")
  packages = Oj.load(File.read('package.json'))['dependencies']
  project_dir = Dir.pwd
  packages.each do |package_name, _version|
    local_path = get_local_npm_path(package_name, project_dir)
    if local_path
      log_success("Found local path for npm package #{package_name}: #{local_path}")
      package_statuses[package_name.to_sym] = { path: local_path, enabled: prompt_for_inclusion(package_name, modify_mode, package_statuses) }
    else
      log_error("Local path not found for npm package: #{package_name}. Ensure the package is installed using 'npm install #{package_name}' or 'yarn add #{package_name}' if you're using Yarn.")
    end
  end
else
  log_error("Neither Gemfile nor package.json found in the current directory.")
  # Support for Python requirements.txt is forthcoming.
end

File.write(PACKAGE_STATUS_FILE, Oj.dump(package_statuses, mode: :compat))

require_relative 'create_embeddings'
require_relative 'generate_embeddings'
require_relative 'upload_embeddings'

# TODO: Obtain vector representations and upload to Pinecone
